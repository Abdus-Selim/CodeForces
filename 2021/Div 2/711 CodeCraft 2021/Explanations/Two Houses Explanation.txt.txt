# $K_a > K_b \implies b \to a$ so only check $a \to b$

## Unique Topological Sort on the Strongly Connected Graph

- This graph has the property that there is an edge between every pair of vertices.
- Let us compress all strongly connected components into a single vertex and look at this graph.
- Just like the original graph, this graph will also have every pair connected.
- Since every pair has a directed graph, for every pair there $(u, v)$, we know which vertex should come first in the topological sort. The topological sort is unique.

---

## The indegree of a vertex is also sorted in ascending order in the topological sort

- Let us consider two adjacent nodes in the topological sort of the SCC graph - $L, R$
- Let $u$ be in $L$ and $v$ be in $R$
- Every pair is connected and the topological sort is unique and these are adjacent nodes so the indegree contribution from the other nodes 
to $L$ and $R$ will be equal.
    - So, let us delete all other nodes from the graph and only look at $L$ and $R$
    - $L$ is a $SCC$ so each vertex will have indegree at most $|L| - 1$
        - There can be no incoming edge from any vertex in $R$
    - Each vertex in $R$ will have indegree $\ge |L|$
        - It has to have incoming edges from every vertex in $L$

---

## Reachability

- If $K_a < K_b$, either $a$ and $b$ are is the same SCC or $b$ is in a SCC to the left of $a$ in the topological sort enumeration
- Either way $a \to b$

---

- Sort all the pairs by $(K_a - K_b)$
    - Process the pairs in descending order of this value
    - For every pair, we are guaranteed that the higher order is reachable from the lower order so only query the other pair.

-----

```cpp
int main()
{
    int no_of_vertices;
    cin >> no_of_vertices;
 
    vector <int> indegree(no_of_vertices + 1);
    for(int i = 1; i <= no_of_vertices; i++)
    {
        cin >> indegree[i];
    }
 
    vector < pair <int, pair <int, int> > > edges;
    for(int i = 1; i <= no_of_vertices; i++)
    {
        for(int j = i + 1; j <= no_of_vertices; j++)
        {
            int weight = abs(indegree[i] - indegree[j]);
 
            pair <int, int> E = make_pair(i, j);
 
            edges.push_back(make_pair(weight, E));
        }
    }
 
    sort(edges.begin(), edges.end());
    reverse(edges.begin(), edges.end());
 
    int answer_u = 0, answer_v = 0;
    for(int i = 0; i < edges.size(); i++)
    {
        int u = edges[i].second.first, v = edges[i].second.second;
 
        if(indegree[u] > indegree[v])
        {
            swap(u, v);
        }
 
        cout << "? " << v << " " << u << "\n";
        cout.flush();
 
        string reply;
        cin >> reply;
 
        if(reply[0] == 'Y')
        {
            answer_u = u; answer_v = v;
            break;
        }
    }
 
    cout << "! " << answer_u << " " << answer_v << "\n";
    return 0;
}
```