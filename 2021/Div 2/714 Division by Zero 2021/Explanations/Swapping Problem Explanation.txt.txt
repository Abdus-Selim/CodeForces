Let us interpret the problem geometrically. 
We have some segments [L, R] and must do some swaps to minimize the sum of segments. 

It is best to swap some segments which intersect. If we swap segments which don't intersect, we will only increase the sum. 

Let us consider two intersecting segments 

[L1, R1], [L2, R2] 

L1 < L2 < R1 < R2 

Here, if we swap (R1, R2), we will not be reducing the sum of segments. 
The overlap between the two segments will remain [L2, R1] 

If we have to reduce the sum of segments, we must swap a left with a right 

We have to swap (L2, R2) 

The situation is similar if one segment contains the other 

L1 < L2 < R2 < R1 

It is always better to swap a left point with a right point rather than 2 lefts or 2 rights

-----

So, we will look at all the segments given to us. 

If (A[i] < B[i]), we can swap the right 
If (A[i] > B[i]), we can swap the left 

We must always swap a left segment with a right segment. 

Instead of minimizing the sum, let us try to look for a pair of segments 

1. One is Left and the other is right 
2. Maximum overlap

------

In both our sets L and R, we will keep track of the prefix maximum end point of each segment. 

Then, we will iterate over each segment. 

Suppose our current segment is in R, 

we will look for the first segment in L such that 
The starting point is <= A[i] 

The ending point is the prefix maximum. 

The overlap is min(R[i], prefix Maximum Left)

We will choose the segment which maximises the overlap. 

We can use binary search in a map for this. 

-----

int main()
{
    int no_of_elements;
    cin >> no_of_elements;

    vector <int> A(no_of_elements + 1), B(no_of_elements + 1);
    for(int i = 1; i <= no_of_elements; i++)
    {
        cin >> A[i];
    }

    for(int i = 1; i <= no_of_elements; i++)
    {
        cin >> B[i];
    }

    map <int, int> X, Y;
    for(int i = 1; i <= no_of_elements; i++)
    {
        if(A[i] <= B[i])
        {
            X[A[i]] = max(X[A[i]], B[i]);
        }
        else
        {
            Y[B[i]] = max(Y[B[i]], A[i]);
        }
    }

    update_prefix_max(X);
    update_prefix_max(Y);

    long long overlap = 0;
    for(int i = 1; i <= no_of_elements; i++)
    {
        long long overlap_here = 0;

        if(A[i] <= B[i])
        {
            auto it = Y.upper_bound(A[i]);

            if(it != Y.begin())
            {
                it--;
                int left = A[i], right = min(it->second, B[i]);

                overlap_here = right - left;
            }
        }
        else
        {
            auto it = X.upper_bound(B[i]);

            if(it != X.begin())
            {
                it--;

                int left = B[i], right = min(it->second, A[i]);
                overlap_here = right - left;
            }
        }

        overlap = max(overlap, overlap_here);
    }

    long long answer = 0;
    for(int i = 1; i <= no_of_elements; i++)
    {
        answer += abs(A[i] - B[i]);
    }

    answer -= 2*overlap;

    cout << answer << "\n";
    return 0;
}


