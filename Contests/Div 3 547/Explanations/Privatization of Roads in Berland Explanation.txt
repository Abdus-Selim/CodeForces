Let us make an observation -

If we colour the edges with D colours,
then every vertex with more than D edges will have 2 edges of the same colour

Let us keep track of the degree of each vertex.
We will make a suffix sum array over the array of frequencies of every degree.

Let us look at the rightmost i, such that Suffix Sum[i] > k,

If we paint the graph in (i - 1) colours,
then all of the Suffix Sum[i] vertices will have 2 monochromatic edges, which is more than k

So that means (i - 1) or fewer colours is not possible.

Then, i is the answer.

-----

Now, we will see how we will colour the edges in exactly i colours

We will do a DFS and keep track of which colour the edge {Parent[v], v} was painted in

Suppose it was painted in colour c, then we will paint the first edge of v

(c + 1) mod k, then the next edge
(c + 2) mod k, and so on

This ensures that only those vertices with degree > i,
have two edges of the same colour and this number will not be more than K

-----

#include <iostream>
#include <vector>

using namespace std;

const int MAX_N = 2e5 + 5;
int no_of_colours = 0;
vector < pair <int, int> > tree[MAX_N];
vector <int> colour(MAX_N, 0);

void dfs(int v, int parent_v, int last_colour)
{
    int next_colour = (last_colour + 1)%no_of_colours;

    for(int i = 0; i < tree[v].size(); i++)
    {
        int child_v = tree[v][i].first;

        if(child_v == parent_v)
        {
            continue;
        }

        colour[tree[v][i].second] = next_colour;

        dfs(child_v, v, next_colour);

        next_colour = (next_colour + 1)%no_of_colours;
    }
}

int main()
{
    int no_of_vertices, k;
    cin >> no_of_vertices >> k;

    vector <int> degree(no_of_vertices + 1, 0);
    int no_of_edges = no_of_vertices - 1;
    for(int i = 1; i <= no_of_edges; i++)
    {
        int u, v;
        cin >> u >> v;

        tree[u].push_back(make_pair(v, i));
        tree[v].push_back(make_pair(u, i));

        degree[u]++; degree[v]++;
    }

    vector <int> frequency(no_of_vertices + 1, 0);
    for(int i = 1; i <= no_of_vertices; i++)
    {
        frequency[degree[i]]++;
    }

    vector <int> suffix_sum(no_of_vertices + 5, 0);
    for(int i = no_of_vertices; i >= 1; i--)
    {
        suffix_sum[i] = suffix_sum[i + 1] + frequency[i];
    }

    for(int i = no_of_vertices; i >= 1; i--)
    {
        if(suffix_sum[i] > k)
        {
            no_of_colours = i;
            break;
        }
    }

    dfs(1, 0, -1);

    cout << no_of_colours << "\n";
    for(int i = 1; i <= no_of_edges; i++)
    {
        cout << colour[i] + 1 << " ";
    }

    cout << "\n";
    return 0;
}
