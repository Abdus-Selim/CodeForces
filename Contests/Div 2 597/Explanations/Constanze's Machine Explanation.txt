If the string contains any 'w' or 'm', then the answer is 0. 

Otherwise, Let f(i) be the number of ways of making the first i letters.

If, S[i, i - 1] = 'nn', then f(i) = f(i - 1) + f(i - 2) since the last letter can either be 'n' and appended at the end of a string of length (i - 1) 

or it can be 'm' and appended at the end of a string of length (i - 2)

If we treat it like 'n', then we can get f(i - 1) strings of length (i - 1) and put an 'n' at the end. 

If we treat it like 'm', then we can get f(i - 2) strings of length(i - 2) and put an 'm' at the end. 

Hence, f(i) = f(i - 1) + f(i - 2)

---

Similarly, if S[i, i - 1] = 'uu', then f(i) = f(i - 1) + f(i - 2)

---

Otherwise, f(i) = f(i - 1), as there is only one choice for the last letter and it can be appended at the end of a string of length (i - 1) letters. 

---

The answer is f(N)

---

int main()
{
    string S;
    cin >> S;

    for(int i = 0; i < S.size(); i++)
    {
        if(S[i] == 'm' || S[i] == 'w')
        {
            cout << "0\n";

            return 0;
        }
    }

    const int MOD = 1e9 + 7;

    vector <int> no_of_strings_till(S.size() + 1, 0);
    no_of_strings_till[0] = 1;

    for(int i = 1; i < S.size(); i++)
    {
        if(S[i] == 'n' && S[i - 1] == 'n')
        {
            if(i == 1)
            {
                no_of_strings_till[i] = 2;
                continue;
            }

            no_of_strings_till[i] = (no_of_strings_till[i - 1] + no_of_strings_till[i - 2])%MOD;
        }
        else if(S[i] == 'u' && S[i - 1] == 'u')
        {
            if(i == 1)
            {
                no_of_strings_till[i] = 2;
                continue;
            }

            no_of_strings_till[i] = (no_of_strings_till[i - 1] + no_of_strings_till[i - 2])%MOD;
        }
        else
        {
            no_of_strings_till[i] = no_of_strings_till[i - 1];
        }
    }

    cout << no_of_strings_till[S.size() - 1];

    return 0;
}
