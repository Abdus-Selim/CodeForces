Let us use an elegant idea for this. 

Notice that the actual values of the elements do not matter - only the signs. 

Let us replace the positive numbers by 0 and the negative numbers by 1. 

Then let us maintain an array Sum, where Sum[i] holds the sum of the first i elements (mod 2). 

-----

If Sum[L - 1] = Sum[R], then it means that (Sum[R] - Sum[L - 1] = 0), which means that negative numbers occur an even number of times in the range. 

Every time in the sum vector, there are two elements which have the same value, they correspond to (L - 1, R) which gives us a segment(L, R) which has a positive product.

------

We want to count the ranges of the first x elements too so we will make Sum[0] = 0, even though A[0] does not exist. 

Now the number of segments that have positive products is simply

C(zeros, 2) + C(ones, 2) - The number of ways to choose 2 zeroes and the number of ways to choose 2 ones in the sum vector. 

----

The number of segments that give negative products is simply the total number of segments - positive product segments

The total number of segments is C(N, 2) + N - Because we want to include singleton segments as well. 

-----

int main()
{
    int no_of_elements;
    cin >> no_of_elements;

    vector <int> sign(no_of_elements + 1, 0);
    for(int i = 1; i <= no_of_elements; i++)
    {
        int x;
        cin >> x;

        sign[i] = (x > 0 ? 0 : 1);
    }

    vector <int> sum_till(no_of_elements + 1, 0);
    for(int i = 1; i <= no_of_elements; i++)
    {
        sum_till[i] = (sum_till[i - 1] + sign[i])%2;
    }

    long long no_of_zeroes = 0, no_of_ones = 0;
    for(int i = 0; i <= no_of_elements; i++)
    {
        if(sum_till[i] == 0)
        {
            no_of_zeroes++;
        }
        else
        {
            no_of_ones++;
        }
    }

    long long no_of_positive_products = choose_2(no_of_zeroes) + choose_2(no_of_ones);
    long long no_of_negative_prodcuts = choose_2(no_of_elements) + no_of_elements - no_of_positive_products;

    cout << no_of_negative_prodcuts << " " << no_of_positive_products << "\n";

    return 0;
}

