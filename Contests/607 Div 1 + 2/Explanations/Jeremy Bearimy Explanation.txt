We need to think about how many times a particular edge is counted.

The main insight here is that each edge of a tree is a bridge between 2 Components.

Minimizing Weight -

When we try to minimize the weight, we will look at each edge and try to minimise the number of times it is counted.

We will put pairs into 1 component.
If both components are of even size, then it will be counted 0 times.
If both components are odd, then this edge will be counted once.

Maximizing Weight -

When we try to maximize the weight, we want each edge to be counted as many times as possible.
We will try to make each pair cross this edge.
Suppose the component sizes are C and D, and C < D, then we will put C distinct numbers in the component and all their counterparts on the other end.
 Hence, the edge is counted min(C, D) times.

 ---

 How do we find out the size of the subtree on either side of an edge (u, v) ? 

 1. We will perform a DFS and compute the size of the subtree rooted at v. 

 2. For every vertex v, we will keep track of it's parent u

 3. While calculating the sizes of the 2 components (u, v)

 One of the components will be the subtree rooted at u and the other will be 
 all the other vertices. 

 -----

 void dfs(int v, int parent_v)
 {
     parent[v] = parent_v;
     subtree_size[v] = 1;
     
     for(int i = 0; i < tree[v].size(); i++)
     {
         int child_v = tree[v][i];
         
         if(child_v == parent_v)
         {
             continue;
         }
         
         dfs(child_v, v);
         
         subtree_size[v] += subtree_size[child_v];
     }
 }

----

struct Edge
{
    int u, v;
    long long weight;
    
    Edge(){};
    
    Edge(int U, int V, long long W)
    {
        u = U; v = V;
        weight = W;
    }
};


void solve()
{
    int no_of_pairs;
    cin >> no_of_pairs;
    
    int no_of_vertices = 2*no_of_pairs;
    int no_of_edges = no_of_vertices - 1;
    
    vector <Edge> E(no_of_edges + 1);
    
    tree.resize(no_of_vertices + 1);
    subtree_size.resize(no_of_vertices + 1);
    parent.resize(no_of_vertices + 1);
    
    for(int i = 1; i <= no_of_vertices; i++)
    {
        tree[i].clear();
        
        subtree_size[i] = 0;
        
        parent[i] = 0;
    }
    
    for(int i = 1; i <= no_of_edges; i++)
    {
        cin >> E[i].u >> E[i].v >> E[i].weight;
        
        tree[E[i].u].push_back(E[i].v);
        tree[E[i].v].push_back(E[i].u);
    }
    
    dfs(1, 0);
    
    long long minimum = 0, maximum = 0;
    for(int i = 1; i <= no_of_edges; i++)
    {
        int u_subtree, v_subtree;
        
        if(parent[E[i].v] == E[i].u)
        {
            v_subtree  = subtree_size[E[i].v];
            u_subtree = no_of_vertices - v_subtree;
        }
        else
        {
            u_subtree = subtree_size[E[i].u];
            v_subtree = no_of_vertices - u_subtree;
        }
        
        int minimum_component = min(u_subtree, v_subtree);
        
        maximum += minimum_component*E[i].weight;
        minimum += (u_subtree%2 == 1 || v_subtree%2 == 1 ? E[i].weight : 0);
    }
    
    cout << minimum << " " << maximum << "\n";
}
