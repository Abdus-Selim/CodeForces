The main observation is that every element will be increased at most twice. The reason is that there are only 2 neighbours. 

Among {i, i + 1, i + 2}, there can only be 2 values (at most) such that the neighbours have an equal value. 

Then, let f(i, x) be the cost for the first i elements if x additions are done on the i-th element. 

We can process the transition based on the value of A[i - 1] after y additions. 

The answer is min{f(n, 0), f(n, 1), f(n, 2)}

---

void solve()
{
    int no_of_elements;
    scanf("%d", &no_of_elements);
 
    vector <long long> A(no_of_elements + 1, 0);
    vector <long long> cost(no_of_elements + 1, 0);
    for(int i = 1; i <= no_of_elements; i++)
    {
        scanf("%I64d %I64d", &A[i], &cost[i]);
    }
 
    const long long oo = 1e18;
    vector <vector <long long> > best(no_of_elements + 1, vector <long long> (3, 0));
    best[0][0] = 0, best[0][1] = best[0][2] = 0;
    for(int i = 1; i <= no_of_elements; i++)
    {
        for(int no_of_adds = 0; no_of_adds <= 2; no_of_adds++)
        {
            best[i][no_of_adds] = oo;
 
            for(int no_of_previous_adds = 0; no_of_previous_adds <= 2; no_of_previous_adds++)
            {
                if(A[i] + no_of_adds != A[i - 1] + no_of_previous_adds)
                {
                    best[i][no_of_adds] = min(best[i][no_of_adds], best[i - 1][no_of_previous_adds] + no_of_adds*cost[i]);
                }
            }
        }
    }
 
    long long answer = oo;
    for(int no_of_adds = 0; no_of_adds <= 2; no_of_adds++)
    {
        answer = min(answer, best[no_of_elements][no_of_adds]);
    }
 
    printf("%I64d\n", answer);
}
