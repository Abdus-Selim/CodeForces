1. Draw a graph 
The vertices are the alphabets and the edges are drawn between consecutive characters. 
We have to be careful about not adding the same edge twice. This is very important.

    for(int i = 1; i < password.size(); i++)
    {
        if(adjacency[password[i] - 'a'][password[i - 1] - 'a'] == false)
        {
            adjacency[password[i] - 'a'][password[i - 1] - 'a'] = true;
            adjacency[password[i - 1] - 'a'][password[i] - 'a'] = true;
                                         
            graph[password[i] - 'a'].push_back(password[i - 1] - 'a');
            graph[password[i - 1] - 'a'].push_back(password[i] - 'a');
            
            degree[password[i] - 'a']++;
            degree[password[i - 1] - 'a']++;
        }
        
    }

----

2. If any vertex has degree > 2, it is not possible as any key can only have 2 neighbours

    for(int alpha = 0; alpha < NO_OF_ALPHABETS; alpha++)
    {
        if(degree[alpha] > 2)
        {
            cout << "NO\n";
            return;
        }
    }

-----

3. Now, we must look at each connected component of the graph seperately. 
We must find the component number of each vertex. We can do this by performing a series of DFS 

    int component = 1;
    
    for(int alpha = 0; alpha < NO_OF_ALPHABETS; alpha++)
    {
        if(component_no[alpha] == 0)
        {
            dfs(alpha, -1, component++);
        }
    }
    
-----

Here is the DFS itself 

void dfs(int v, int parent_v, int c)
{
    //cout << "V = " << v << " C = " << c << "\n";
    component_no[v] = c;
    
    for(int i = 0; i < graph[v].size(); i++)
    {
        int child_v = graph[v][i];
        
        if(child_v == parent_v || component_no[child_v] == c)
        {
            continue;
        }
        
        dfs(child_v, v, c);
    }
}

-----

4. Every component will be printed together. 
So, first we will print characters of component 1, then characters of component 2, and so on. 

-----

5. How to print characters of a given component ? 
There have to be 2 vertices in this component of degree 1 and every other vertex must have degree 2. 
We will start from one of the vertices of degree 1 and keep going till we reach the vertex of degree 2

If the component is of size 1, then we can just print it
Otherwise, we will look for the first border and then DFS till we reach the second border

for(int c = 1; c < component; c++)
    {
        vector <int> this_component;
        for(int alpha = 0; alpha < NO_OF_ALPHABETS; alpha++)
        {
            if(component_no[alpha] == c)
            {
                this_component.push_back(alpha);
            }
        }
        
        if(this_component.size() == 1)
        {
            keyboard += (char)('a' + this_component[0]);
            used[this_component[0]] = true;
            continue;
        }
        
        int border_1 = -1, border_2 = -1;
        for(int i = 0; i < this_component.size(); i++)
        {
            if(degree[this_component[i]] == 1)
            {
                if(border_1 == -1)
                    border_1 = this_component[i];
                else
                    border_2 = this_component[i];
            }
        }
        
        if(border_1 == -1 || border_2 == -1)
        {
            cout << "NO\n";
            
            return;
        }
        
        keyboard += (char)('a' + border_1);
        used[border_1] = true;
        
        while(keyboard.back() - 'a' != border_2)
        {
            for(int i = 0; i < graph[keyboard.back() - 'a'].size(); i++)
            {
                if(!used[graph[keyboard.back() - 'a'][i]])
                {
                    int next = graph[keyboard.back() - 'a'][i];
                    
                    keyboard += (char)('a' + next);
                    
                    used[next] = true;
                    
                    break;
                }
            }
        }
        
    }
   
