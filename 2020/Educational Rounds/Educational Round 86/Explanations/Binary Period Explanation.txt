If the string consists of only 0s or only 1s, then the period is 1 and we can print S as it is

Otherwise, we can always achieve a period of 2.

It is always possible to make the string 0101010101 or 101010101

Whenever we are about to add S[i], we will check if S[i] = S[i - 1]. If yes, then we will put in the other character in between.

If (S[i] != S[i - 1]), then we will add S[i] as it is.

This ensures that S is a subsequence of T and that T has period 2

T cannot have period 1 so period 2 is the minimum

-----

void solve()
{
    string S;
    cin >> S;

    if(is_periodic(S, 1))
    {
        cout << S << "\n";

        return;
    }

    string answer;
    for(int i = 0; i < S.size(); i++)
    {
        if(answer.size() == 0 || S[i] != answer.back())
        {
            answer += S[i];
        }
        else
        {
            answer += other(S[i]);
            answer += S[i];
        }
    }

    cout << answer << "\n";
}
