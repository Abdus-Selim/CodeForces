Let us try to binary search the answer.

How do we check if it is possible to get x as the minimum element of 2 arrays after such an operation ? 

We can create a bitmask corresponding to each array. 
A[i] = 1 if A[i] >= x
A[i] = 0 if A[i] < x

We will get two bitmasks. 
When we perform the bitwise OR of the two masks, we will get a 1 if the resulting array has an element >= x and a 0 otherwise.

So, to check if a given value of x is possible, we will create a 8-bit bitmask for each array. 
We will then check if it is possible for us to have 2 arrays such that their bitwise OR results in a bitmask having all ones - 
11111111

If yes, then it is possible. 

We will binary search for the best value of x.
We will maintain the invariant that it is always possible to have the minimum >= L and it is never possible to have the minimum >= R

Ultimately, L is the best value that the minimum can have.

-----

int possible(int x, int &i, int &j)
{
    map <int, int> map_index;
    
    for(int i = 1; i <= no_of_arrays; i++)
    {
        int mask = 0;
        
        for(int j = 1; j <= no_of_elements; j++)
        {
            if(A[i][j] < x)
                continue;
            
            mask |= (1 << (j - 1));
        }
        
        map_index[mask] = i;
    }
    
    int full_mask = (1 << no_of_elements) - 1;
    
    for(auto it = map_index.begin(); it != map_index.end(); it++)
    {
        int mask = it->first;
        
        for(int m = 0; m <= full_mask; m++)
        {
            if((mask|m) == full_mask && map_index.find(m) != map_index.end())
            {
                i = map_index[mask];
                j = map_index[m];
                
                return true;
            }
        }
    }
    
    return false;
}

int main()
{
    scanf("%d %d", &no_of_arrays, &no_of_elements);
    
    for(int i = 1; i <= no_of_arrays; i++)
    {
        for(int j = 1; j <= no_of_elements; j++)
        {
            scanf("%d", &A[i][j]);
        }
    }
    
    int left = 0, right = 1e9 + 1;
    int best_i = 1, best_j = 1;
    
    while(right - left > 1)
    {
        int mid = (left + right)/2;
        
        if(possible(mid, best_i, best_j))
        {
            left = mid;
        }
        else
        {
            right = mid;
        }
    }
    
    printf("%d %d\n", best_i, best_j);
    return 0;
}
