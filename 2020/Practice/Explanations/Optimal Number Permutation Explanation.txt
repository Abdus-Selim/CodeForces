The sum will always be non negative.
Let us try to make it 0

The 1's should be at a distance of (n - 1)
The 2's should be at a distance of (n - 2)
The 3's should be at a distance of (n - 3)
.
.
.
The n's can be at any position since (n - i) = 0

-----

We will place 1 at (1, n), 3 at (2, n - 1) and so on
We will place 2 at (n + 1, 2n - 1), 4 at (n + 2, 2n - 2) and so on
We can place the n's anywhere.

Since the distance reduces by 1 at each integer and the distance between
the free places reduces by 2 on placing an integer,
it is a good idea to keep integers of the same parity together.

-----

Ultimately, the array will look like all the odd integers in first half and
even integers in second half with n in the last position and
either in the middle of the first or second half, depend on it's parity.

-----

10
1 3 5 7 9 9 7 5 3 1 2 4 6 8 10 8 6 4 2 10

11
1 3 5 7 9 11 9 7 5 3 1 2 4 6 8 10 10 8 6 4 2 11

-----

int main()
{
    int no_of_elements;
    cin >> no_of_elements;

    vector <int> A(2*no_of_elements + 1);
    for(int front = 1, back = no_of_elements, odd = 1; odd <= no_of_elements; front++, back--, odd += 2)
    {
        A[front] = A[back] = odd;
    }

    for(int front = no_of_elements + 1, back = 2*no_of_elements - 1, even = 2; even <= no_of_elements; front++, back--, even += 2)
    {
        A[front] = A[back] = even;
    }

    for(int i = 1; i <= 2*no_of_elements; i++)
    {
        if(A[i] == 0)
        {
            A[i] = no_of_elements;
        }
    }

    for(int i = 1; i <= 2*no_of_elements; i++)
    {
        cout << A[i] << " ";
    }

    cout << "\n";

    return 0;
}
