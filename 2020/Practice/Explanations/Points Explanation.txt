We want to compute (x2 - x1)^2 + (y2 - y1)^2 for every pair.

X and Y is independent so we will compute it differently

Let us look at the X's.

A given X1 is linked with (n - 1) other points

(X1 - X2)^2 = X1^2 + X2^2 - 2X1.X2

X1 is linked with (N - 1) points so each square is counted (N - 1) times.

Now, let us try to calculate the linear term.

Each X1 is multiplied with (X1 + X2 + ... + Xn - X1)

Note that we do not need to put a multiplier of 2 here since we will be adding
Xi.Xj when we at Xi and we will be adding Xj.Xi when we are at Xi

So, we only have to add it once

------

long long calculate(vector <long long> &P, int n)
{
    long long squares = 0;
    for(int i = 1; i <= n; i++)
    {
        squares += (n - 1)*P[i]*P[i];
    }

    long long sum = 0;
    for(int i = 1; i <= n; i++)
    {
        sum += P[i];
    }

    long long linear_term = 0;
    for(int i = 1; i <= n; i++)
    {
        linear_term += P[i]*(sum - P[i]);// 2*P[i]*P[i];
    }

    return (squares - linear_term);
}

int main()
{
    int no_of_points;
    cin >> no_of_points;

    vector <long long> X(no_of_points + 1);
    vector <long long> Y(no_of_points + 1);

    for(int i = 1; i <= no_of_points; i++)
    {
        cin >> X[i] >> Y[i];
    }

    long long distance = calculate(X, no_of_points) + calculate(Y, no_of_points);

    cout << distance << "\n";
    return 0;
}
