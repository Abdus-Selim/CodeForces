Let us try to brute force this problem.

Let Left_border[i] represent the first index on the left of P[i] that is > P[i]

Let Right_border[i] represent the first index on the right

We will go through each j in the Left_border and if it is P[j],

Check if (P[i] - P[j]) is present in [i, Right_border[i]]

------

int get_count(int left_1, int right_1, int left_2, int right_2, int total_sum)
{
    if(right_2 - left_2 < right_1 - left_1)
    {
        swap(right_1, right_2);
        swap(left_1, left_2);
    }

    int count = 0;
    for(int i = left_1; i <= right_1; i++)
    {
        int remaining = total_sum - permutation[i];

        if(1 <= remaining && remaining <= no_of_elements &&
           left_2 <= position[remaining] && position[remaining] <= right_2)
        {
            count++;
        }
    }

    return count;
}


-----

This approach looks like it is O(n^2) but
it is actually O(N log N) provided
we choose the smaller segment among the left and right border each time

Let us look at the largest element of the array.
It divides the array into 2 segments of length - m1, m2
where m1 + m2 = n - 1
The minimum of m1, m2 <= n/2

So the number of comparisons done in n/2

Now, let us look at the largest elements of segments m1 and m2
They will lead to m1/2 <= n/4 and m2/2 <= n/2 comparisons

The number of comparisons for these 3 elements is n(1/2 + 1/4 + 1/2)

Similarly, we will go to the largest elements in the remaining segments.
Each element will have a number of comparisons of the form n/2^i, i >= 1

So, finally, the time complexity will be n x O(log n) = O(n log n)

-----

Although we are processing the elements from i = 1 to n,
the time complexity is easier to process if we visit the elements in descending order.

That's what makes this problem and this complexity analysis so beautiful !

-----

Now, how do we find out the left and right border of each i ?

We can do it with a linear scan and a stack.

Initially, the stack is empty.

When we encounter P[i], we will pop the top of the stack as long as
stack.top < P[i]

And then we will push P[i]

We have popped off all indices j, such that P[j] < P[i]

This is optimal, because any future index k, such that j < i < k and P[j] > P[k]

Will be better matched to i instead as

P[i] > P[j] > P[k]

-----

int main()
{
    cin >> no_of_elements;

    permutation.resize(no_of_elements + 1);
    position.resize(no_of_elements + 1);
    for(int i = 1; i <= no_of_elements; i++)
    {
        cin >> permutation[i];

        position[permutation[i]] = i;
    }

    vector <int> left_border(no_of_elements + 1);
    stack <pair <int, int> > left_S;
    left_S.push(make_pair(no_of_elements + 1, 0));
    for(int i = 1; i <= no_of_elements; i++)
    {
        while(left_S.top().first < permutation[i])
        {
            left_S.pop();
        }

        left_border[i] = left_S.top().second + 1;

        left_S.push(make_pair(permutation[i], i));
    }

    stack <pair <int, int> > right_S;
    vector <int> right_border(no_of_elements + 1);
    right_S.push(make_pair(no_of_elements + 1, no_of_elements + 1));
    for(int i = no_of_elements; i >= 1; i--)
    {
        while(right_S.top().first < permutation[i])
        {
            right_S.pop();
        }

        right_border[i] = right_S.top().second - 1;

        right_S.push(make_pair(permutation[i], i));
    }

    int no_of_special_segments = 0;
    for(int i = 1; i <= no_of_elements; i++)
    {
        no_of_special_segments += get_count(left_border[i], i - 1, i + 1, right_border[i], permutation[i]); //cout << "i = " << permutation[i] << " Count = " << no_of_special_segments << "\n";
    }

    cout << no_of_special_segments << "\n";
    return 0;
}
