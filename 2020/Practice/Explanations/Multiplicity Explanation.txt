Let f(i, j) denote the number of sequences of length j ending at A[i]

Now, j has to be a divisor of A[i] so we need not check all integers,
but only the divisors of A[i]

f(i, j) = f(i - 1, j - 1) + f(i - 2, j - 1) + ... + f(1, j - 1)

We want to know the number of sequences of length (j - 1) ending anywhere before A[i]

-----

We do not need to do O(n^2) each time.
Just like the Coin Change DP problem, we can optimise it to O(N) space

We will maintain a running variable.

Let g(i) be equal to the number of sequences of length i

As we will be processing the elements in order from 1 to N, we can take advantage of our processing order.
At no point in our DP do we ever need to refer to a state from a greater i than the one we are at.

So, g(i) = g(i - 1), if i is a divisor of the current element

-----

Also, we cannot factorise the integers in time.
We must use a sieve to precompute the divisors of each of the integers

-----

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int no_of_elements;
    cin >> no_of_elements;

    vector <int> A(no_of_elements + 1);
    for(int i = 1; i <= no_of_elements; i++)
    {
        cin >> A[i];
    }

    const int MAX = 1e6 + 5;
    vector <vector <int> > divisors(MAX);
    for(int i = 1; i < MAX; i++)
    {
        for(int multiple = i; multiple < MAX; multiple += i)
        {
            divisors[multiple].push_back(i);
        }
    }

    const int MOD = 1e9 + 7;
    vector <long long> no_of_sequences(MAX, 0), sequences_here(MAX, 0);
    long long total_sequences = 0;

    no_of_sequences[0] = 1;

    for(int i = 1; i <= no_of_elements; i++)
    {
        for(int d = 0; d < divisors[A[i]].size(); d++)
        {
            int m = divisors[A[i]][d];

            sequences_here[m] = no_of_sequences[m - 1];
        }

        for(int d = 0; d < divisors[A[i]].size(); d++)
        {
            int m = divisors[A[i]][d];

            no_of_sequences[m] += sequences_here[m];

            no_of_sequences[m] %= MOD;
        }
    }

    for(int i = 1; i < MAX; i++)
    {
        total_sequences += no_of_sequences[i];

        total_sequences %= MOD;
    }

    cout << total_sequences << "\n";
    return 0;
}
