1. Let us draw a graph where each alphabet is a vertex

2. We will draw an edge between two alphabets if they occur in the same word

3. The number of components in this graph is the number of equivalent passwords.

-----

1. I did this by creating a bitmask corresponding to each word

2. If a word has two bits set - B1 and B2, connect (B1, B2) using a DSU structure

3. Each time we perform a 'unite' operation, the number of connected components reduces by 1

4. We need to be careful of 1 thing. In the beginning we created a DSU of 26 vertices

But all 26 alphabets might not be used.
The alphabets that are not used will be single components

5. So, the answer is the number of components in our graph -
the number of unused alphabets

-----

int main()
{
    int no_of_words;
    cin >> no_of_words;

    vector <int> used(NO_OF_ALPHABETS, false);
    DSU dsu(NO_OF_ALPHABETS);

    for(int i = 1; i <= no_of_words; i++)
    {
        string word;
        cin >> word;

        int mask = 0;
        for(int j = 0; j < word.size(); j++)
        {
            mask |= (1 << (word[j] - 'a'));

            used[word[j] - 'a'] = true;
        }

        for(int bit_1 = 0; bit_1 < NO_OF_ALPHABETS; bit_1++)
        {
            for(int bit_2 = 0; bit_2 < NO_OF_ALPHABETS; bit_2++)
            {
                if(!is_set(mask, bit_1) || !is_set(mask, bit_2) || dsu.get_parent(bit_1) == dsu.get_parent(bit_2))
                {
                    continue;
                }

                dsu.unite(bit_1, bit_2);
            }
        }
    }

    int unused_alphabets = 0;
    for(int alpha = 0; alpha < NO_OF_ALPHABETS; alpha++)
    {
        if(!used[alpha])
        {
            unused_alphabets++;
        }
    }

    int actual_components = dsu.no_of_components - unused_alphabets;

    cout << actual_components << "\n";
    return 0;
}
