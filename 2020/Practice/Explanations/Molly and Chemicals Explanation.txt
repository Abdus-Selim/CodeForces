The number of perfect powers of any integer will not be too many.

It will be at most 40, in fact, in the given range.

If S[R] - S[L] = k^p

We will keep track of the frequency of prefix sum.

For every S[R], it will create a good segment with every S[L] = k^p - S[L]

We will add the frequency of (k^p - S[L]) to the answer

-----

int main()
{
    int no_of_elements, k;
    cin >> no_of_elements >> k;

    vector <long long> powers;
    precompute(powers, k);

    vector <int> A(no_of_elements + 1);
    for(int i = 1; i <= no_of_elements; i++)
    {
        cin >> A[i];
    }

    map <long long, int> prefix_sum_frequency;
    long long prefix = 0;
    prefix_sum_frequency[prefix] = 1;

    long long no_of_segments = 0;
    for(int i = 1; i <= no_of_elements; i++)
    {
        prefix += A[i];

        for(int j = 0; j < powers.size(); j++)
        {
            no_of_segments += prefix_sum_frequency[prefix - powers[j]];
        }

        prefix_sum_frequency[prefix]++;
    }

    cout << no_of_segments << "\n";

    return 0;
}


------

void precompute(vector <long long> &P, long long k)
{
    P.push_back(1);

    if(k == 0 || k == 1)
    {
        return;
    }

    if(k == -1)
    {
        P.push_back(-1);
        return;
    }

    long long oo = 1e14;

    while(abs(P.back()) <= oo)
    {   //cout << P.back() << "\n";
        P.push_back(P.back()*k);
    }
}
