Ultimately, the K greatest integers will be the best sum
It is always possible to make segments in such a way the K greatest integers are chosen.

Let us re-write the array and put a 1 if A[i] is one of the K greatest integers and a 0
otherwise

Suppose we have

1 0 0 0 1

Now, here are the possible divisions

1 | 0 0 0 1
1 0 | 0 0 1
1 0 0 | 0 1
1 0 0 0 | 1

All of these divisions satisfy the condition

-----

We will keep track of all the indices of the k greatest integers.

Suppose the consecutive indices are I[i] and I[i + 1], then the i-th barrier has

I[i] - I[i - 1] ways and the first barrier is at A[1] and the last barrier is at A[n]

We will simply multiply the number of ways to place the other (K - 1) barriers

-----

#include <iostream>
#include <vector>
#include <algorithm>

#define all(v) (v).begin(), (v).end()
using namespace std;

long long get_sum(long long n)
{
    return (n*(n + 1))/2;
}

int main()
{
    int no_of_elements, no_of_parts;
    cin >> no_of_elements >> no_of_parts;

    vector <int> A(no_of_elements + 1);
    for(int i = 1; i <= no_of_elements; i++)
    {
        cin >> A[i];
    }

    vector <long long> indices;
    for(int i = 1; i <= no_of_elements; i++)
    {
        if(A[i] > no_of_elements - no_of_parts)
        {
            indices.push_back(i);
        }
    }

    sort(all(indices));

    long long best_sum = get_sum(no_of_elements) - get_sum(no_of_elements - no_of_parts);

    long long no_of_ways = 1;

    const long long MOD = 998244353;

    for(int i = 1; i < no_of_parts; i++)
    {
        no_of_ways *= (indices[i] - indices[i - 1]);

        no_of_ways %= MOD;
    }

    cout << best_sum << " " << no_of_ways << "\n";
    return 0;
}
