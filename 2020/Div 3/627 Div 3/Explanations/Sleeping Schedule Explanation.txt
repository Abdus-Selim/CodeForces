Let f(i, s) be the maximum number of good sleeps from [i, n]
if we sleep at time s on day i

We can compute this DP in O(N.H) time

-----

Suppose we start at time s on day i,
then we have 2 options for starting on day (i + 1).
We can either wait time = A[i + 1] or time = A[i + 1] - 1

1. (S + A[i + 1])%H
2. (S + A[i + 1] - 1)%H

We will look at the best value of f(i + 1, next_start) and
update f(i, s) accordingly

-----

f(i, s) = (L <= S && S <= R) +
            max{ f(i + 1, next_start_1), f(i + 1, next_start_2)}

The final answer = max{f(1, A[1]), f(1, A[1] - 1)}

as there are only 2 options in the beginning

-----

int main()
{
    int no_of_times, no_of_hours, left, right;
    cin >> no_of_times >> no_of_hours >> left >> right;

    vector <int> A(no_of_times + 1, 0);
    for(int i = 1; i <= no_of_times; i++)
    {
        cin >> A[i];
    }

    for(int i = no_of_times; i >= 1; i--)
    {
        if(i == no_of_times)
        {
            for(int start = 0; start < no_of_hours; start++)
            {
                max_ways[i][start] = (left <= start && start <= right);
            }

            continue;
        }

        for(int start = 0; start < no_of_hours; start++)
        {
            int next_start_1 = (start + A[i + 1])%no_of_hours;
            int next_start_2 = (start + A[i + 1] - 1 + no_of_hours)%no_of_hours;

            int best_next_start;

            if(max_ways[i + 1][next_start_1] < max_ways[i + 1][next_start_2])
            {
                best_next_start = next_start_2;
            }
            else
            {
                best_next_start = next_start_1;
            }

            max_ways[i][start] = (left <= start && start <= right) + max_ways[i + 1][best_next_start];
        }
    }

    int answer = max(max_ways[1][A[1]], max_ways[1][A[1] - 1]);

    cout << answer << "\n";
    return 0;
}
