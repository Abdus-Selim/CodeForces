We will condense contiguous segments of 1 element into 1 element.

Either they will be deleted together or they will never be touched.

Now, let us look at the frequency of each segment.

For each element A[i],
we will count the number of operations required to make this the last element.

If the frequency of segment[A[i]] is N,
Then we will need to delete (N + 1) segments in general.

We will need to delete (N - 1) segments that lie intermediately
1 prefix
1 suffix

We need to separately check if A[i] is in the prefix or the suffix and update the number of operations accordingly.

-----

void solve()
{
    int no_of_elements;
    cin >> no_of_elements;

    vector <int> A(no_of_elements + 1);
    for(int i = 1; i <= no_of_elements; i++)
    {
        cin >> A[i];
    }

    map <int, int> segment_frequency;
    for(int i = 1; i <= no_of_elements; i++)
    {
        if(A[i] != A[i - 1])
        {
            segment_frequency[A[i]]++;
        }
    }

    int minimum_operations = no_of_elements;
    for(map <int, int> :: iterator it = segment_frequency.begin(); it != segment_frequency.end(); it++)
    {
        int operations_here = (it->second) + 1;

        if(A[1] == it->first)
        {
            operations_here--;
        }

        if(A[no_of_elements] == it->first)
        {
            operations_here--;
        }

        minimum_operations = min(minimum_operations, operations_here);
    }

    cout << minimum_operations << "\n";
}
