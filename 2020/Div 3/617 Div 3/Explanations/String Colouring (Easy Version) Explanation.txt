Let us make an observation

For every character S[j] that comes after S[i],
If S[j] > S[i], S[j] will have to meet S[i] at some point.

We need to draw an edge between all pairs (i, j) such that
(i < j) and (S[i] > S[j]) and then check for bipartite matching.

We can do this in O(n^2) time.
We will colour a point red if it is uncoloured and then
colour all it's neighbours blue.

If any of it's neighbours is forced to be red, then it is not possible.

-----

int main()
{
    int length;
    string S;

    cin >> length >> S;

    vector <int> colour(length, UNCOLOURED);
    for(int i = 0; i < length; i++)
    {
        if(colour[i] == UNCOLOURED)
        {
            colour[i] = RED;
        }

        for(int j = i + 1; j < length; j++)
        {
            if(S[j] < S[i] && colour[j] == UNCOLOURED)
            {
                colour[j] = other(colour[i]);

                continue;
            }

            if(S[j] < S[i] && colour[i] == colour[j])
            {
                cout << "NO\n";

                return 0;
            }
        }
    }

    cout << "YES\n";
    for(int i = 0; i < length; i++)
    {
        cout << colour[i];
    }
    cout << "\n";

    return 0;
}
