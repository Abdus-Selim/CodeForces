We can always make b from a in at most 2 moves. 

If the difference is > 0 and odd, then we can reach in 1 move by adding the required amount.
Otherwise, we can reach in 2 moves by adding 2 odd integers.

If the difference is < 0 and even, then we can reach in 1 move by subtracting the required amount. 
Otherwise, we can reach in 2 moves by subtracting a big even integer followed by adding an odd integer.

-----

#include <iostream>
#include <vector>

using namespace std;

void solve()
{
    long long a, b;
    cin >> a >> b;
    
    long long d = (b - a);
    
    int moves = 0;
    
    if(d < 0)
    {
        moves = (d%2 == 0 ? 1 : 2);
    }
    else if(d > 0)
    {
        moves = (d%2 == 1 ? 1 : 2);
    }
    
    cout << moves << "\n";
}

int main()
{
    int no_of_test_cases;
    cin >> no_of_test_cases;
    
    while(no_of_test_cases--)
        solve();
    
    return 0;
}
