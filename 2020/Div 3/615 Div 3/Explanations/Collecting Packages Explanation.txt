We will visit the points in order of their x's.

For a given x, we must visit the points in ascending order of y's.

As we are only allowed to go up, we have to ensure that the y's also only go up as we go from 1 x to another.

1. Sort the points by their X
2. For each X, sort the points by their Y
3. Check if the Y's are in non-decreasing order as we go from one Y to another.

-----

int sort_by_x(point &P, point &Q)
{
    if(P.x == Q.x)
    {
        return (P.y < Q.y);
    }

    return (P.x < Q.x);
}

void solve()
{
    int no_of_points;
    cin >> no_of_points;

    vector <point> P(no_of_points);
    for(int i = 0; i < no_of_points; i++)
    {
        cin >> P[i].x >> P[i].y;
    }

    sort(all(P), sort_by_x);

    int y_is_sorted = true;
    for(int i = 1; i < no_of_points; i++)
    {
        if(P[i - 1].y > P[i].y)
        {
            y_is_sorted = false;
            break;
        }
    }

    if(!y_is_sorted)
    {
        cout << "NO\n";
        return;
    }

    string answer;
    for(int x = 0, y = 0, i = 0; i < no_of_points; i++)
    {
        while(x != P[i].x)
        {//cout << "Right\n" << answer << "\n";
            answer += "R";
            x++;
        }

        while(y != P[i].y)
        {   //cout << "Up\n" << answer << "\n";
            answer += "U";
            y++;
        }
    }

    cout << "YES\n";
    cout << answer << "\n";
}
