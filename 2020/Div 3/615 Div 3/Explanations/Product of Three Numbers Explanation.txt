Let us look at the prime factorisation of N.

Case 1 - N has >= 3 prime factors

Then, a = p1, b = p2, c = N/(p1p2)

c will have a term of p3 in it which is not there in a or b so it cannot be equal

------

Case 2 - N has 2 prime factors

Case 2a - One of p1, p2 has exponent > 2

Let it be p2

a = p1, b = p2, c = N/(p1p2)

As Exp(p2) > 2, the Exponent of p2 in c will be more than 1.
This ensures that c will not be equal to b

Case 2b - p1 = p2 = 2

Then, a = p1, b = p2, c = N/(p1p2)

Case 2c - One of p1, p2 = 1 and the other is 2

If only one of them has exponent 2, it is not possible as

a = p1, b = p2, c = N/(p1p2) and c will be equal to one of (a, b)

Case 2d - Both p1, p2 have exponent 1

If they both have exponent = 1, it is not possible.

It is possible everywhere other than when min(p1, p2) = 1 and max(p1, p2) <= 2
------

Case 3 - N has 1 prime factor

a = p1, b = p1^2, c = p1^3 (at least)

It is not possible if the exponent is less than 6

------

#include <iostream>
#include <vector>
#include <algorithm>

#define all(v) (v).begin(), (v).end()
using namespace std;

void factorise(int n, vector <int> &P, vector <int> &E)
{
    for(long long i = 2; i*i <= n; i++)
    {
        if(n%i == 0)
        {
            int exponent = 0;

            while(n%i == 0)
            {
                n /= i;
                exponent++;
            }

            P.push_back(i);
            E.push_back(exponent);
        }
    }

    if(n > 1)
    {
        P.push_back(n);
        E.push_back(1);
    }
}

void solve()
{
    int n;
    cin >> n;

    vector <int> primes;
    vector <int> exponents;
    factorise(n, primes, exponents);

    if(primes.size() >= 3)
    {
        cout << "YES\n";
        cout << primes[0] << " " << primes[1] << " " << n/(primes[0]*primes[1]) << "\n";

        return;
    }

    if(primes.size() == 1)
    {
        if(exponents[0] < 6)
        {
            cout << "NO\n";
            return;
        }

        long long f1 = primes[0], f2 = primes[0]*primes[0];

        cout << "YES\n";
        cout << f1 << " " << f2 << " " << n/(f1*f2) << "\n";

        return;
    }

    if(primes.size() == 2)
    {
        if(min(exponents[0], exponents[1]) == 1 && max(exponents[0], exponents[1]) <= 2)
        {
            cout << "NO\n";

            return;
        }

        cout << "YES\n";
        cout << primes[0] << " " << primes[1] << " " << n/(primes[0]*primes[1]) << "\n";
        return;
    }
}

int main()
{
    int no_of_test_cases;
    cin >> no_of_test_cases;

    while(no_of_test_cases--)
        solve();

    return 0;
}
