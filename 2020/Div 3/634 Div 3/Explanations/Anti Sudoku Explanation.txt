There is a very elegant solution.
We can replace all the 1's with 2's.

In fact, we can take any digit and replace it with some other digit.
Since, each digit occurs once in every row, column and box,
replacing their occurences, leads to 2 of some digit in every row, column and box

-----

My solution was a little different from this thought.
We can create a bijection between any two solved Sudoku's

We can always relabel 1 Sudoku to get another.
For example, if we want to create a Sudoku where the top line is
123456789

Then, we can take some solved Sudoku
Whatever is in the first cell, we will relabel it with 1
Whatever is in the second cell, we will relabel it with 2
and so on

So, they have already given the solution for 1 Sudoku puzzle

-----

1. We will reduce the Sudoku puzzle in the question to the one we have
2. We will use the solution of this Sudoku puzzle to create the solution of that
Sudoku puzzle

-----

void solve()
We
{
    const int MAX_N = 9;
    vector <string> grid(MAX_N);
    for(int i = 0; i < MAX_N; i++)
    {
        cin >> grid[i];
    }

    /* Make it equivalent to this
     154873296
     386592714
     729641835
     863725149
     975314628
     412968357
     631457982
     598236471
     247189563*/

    /*Make it equivalent to this -
     154873396
     336592714
     729645835
     863725145
     979314628
     412958357
     631457992
     998236471
     247789563*/
    grid[0][6] = grid[0][5];
    grid[1][1] = grid[1][0];
    grid[2][5] = grid[2][8];
    grid[3][8] = grid[3][5];
    grid[4][2] = grid[4][0];
    grid[5][4] = grid[5][7];
    grid[6][7] = grid[6][8];
    grid[7][0] = grid[7][1];
    grid[8][3] = grid[8][2];

    for(int i = 0; i < MAX_N; i++)
    {
        cout << grid[i] << "\n";;
    }
}
