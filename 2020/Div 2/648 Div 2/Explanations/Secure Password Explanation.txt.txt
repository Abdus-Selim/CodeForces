# Naive Approach

- Let us assign a bitmask of $i$ to each of the $n$ elements.
- We will perform $2 \log n$ queries.
    - Find the OR of all elements with the $b$-th bit set
    - Find the OR of all elements with the $b$-th bit unset
- Suppose we want to find the answer for $10011$
    - We will collect the OR of all elements which have the $2, 3$ bit set and the $0, 1, 4$ bit unset.
    - This ensures that every element is counted at least once.
    - Counting an element more than once does not change the answer.

---

# Assigning bitmasks so no $2$ are submasks

- In the naive approach, we were checking all elements which match the complement of $i$. But, why don't we only check elements which have a $1$ where $i$ has a $0$.
    - This way we only need to collect the bitwise OR of all elements which a bit set in their mask. This takes $\log n$ queries.
- The problem occurs when one mask is a submask of another. For example, $110000$ is a submask of $111100$
    - If we only query those subsets which have a $1$ where our mask has a $0$, we will never hit $110000$ or any other submask
    - We will assign masks in such a way that no mask is a submask of another mask.

- Bits which have the same number of bits set can never be a submask of each other. The smallest number of bits for which we can get $1000$ bitmasks is $6$
    - We will collect bitmasks which have $6$ bits set. Assign a mask to each of the $n$ positions. Collect the subset OR of all $13$ bits
    - We can get the value of $P[i]$ by OR-ing all those subsets which have $1$ where it has a $0$

-----

 
int main()
{
    int no_of_elements;
    cin >> no_of_elements;
 
    const int SET_BITS = 6;
    vector <int> mask(no_of_elements + 1);
    for(int m = 1, i = 1; i <= no_of_elements; m++)
    {
        if(no_of_bits(m) == SET_BITS)
        {
            mask[i] = m;
            i++;
        }
    }
 
    const int NO_OF_BITS = 13;
    vector < vector <long long> > subset(NO_OF_BITS + 1);
    for(int i = 1; i <= no_of_elements; i++)
    {
        for(int bit = 0; bit < NO_OF_BITS; bit++)
        {
            if(is_bit_set(mask[i], bit))
            {
                subset[bit].push_back(i);
            }
        }
    }
 
    vector <long long> subset_OR(NO_OF_BITS + 1, 0);
    for(int bit = 0; bit < NO_OF_BITS; bit++)
    {
        if(subset[bit].size() == 0)
        {
            continue;
        }
 
        cout << "? " << subset[bit].size() << " ";
 
        for(int i = 0; i < subset[bit].size(); i++)
        {
            cout << subset[bit][i] << " ";
        }
 
        cout << "\n";
        cout.flush();
 
        cin >> subset_OR[bit];
    }
 
    vector <long long> answer(no_of_elements + 1, 0);
    for(int i = 1; i <= no_of_elements; i++)
    {
        for(int bit = 0; bit < NO_OF_BITS; bit++)
        {
            if(!is_bit_set(mask[i], bit))
            {
                answer[i] |= subset_OR[bit];
            }
        }
    }
 
    cout << "! ";
    for(int i = 1; i <= no_of_elements; i++)
    {
        cout << answer[i] << " ";
    }
    cout << "\n";
 
    return 0;
}