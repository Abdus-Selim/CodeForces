We will iterate from i = 1 to N, and count the number of good subarrays
ending at each i

Let [L1, R1], [L2, R2], ... , [Lk, Rk] be all the subarrays upto i, such that
their sum is 0.

Let Lk be the greatest of all the Lk's

Then,
[Lk + 1, i]
[Lk + 2, i]
[Lk + 3, i]
.
.
.
[i, i]

are all good subarrays as there is no subarrays inside such that the sum is 0.

-----

Now, the only question is how do we find the largest end_point L_k ? 

Let us make an observation 

If Sum[L, R] = 0, then Sum[R] - Sum[L - 1] = 0 

Sum[R] = Sum[L - 1]

We will keep track of the prefix sum and the last occurrence of every Sum[i]

Now, when we are at i, we will check if Sum[i] has occurred before by checking 
it's frequency !

If frequency[Sum[i]] > 0, then it means it has occurred before, 
we will look at the rightmost position where Sum[i] has occurred 

-----

Let it be L 

Then, end point = max(end_point, L + 2)

Why L + 2 ? 

Because Sum[i] = Sum[L] 

So Sum[L + 1, i] = 0 

From [L + 2, i] is the first (possibly) good array)

That is why end point = max(end_point, L + 2)

-----

For every i, we have updated end_point, so end_point always is the point from which

[end_point, i] is a good array. 

Now, we have to ensure that end_point <= i 

The number of good arrays ending at i is (i - end_point + 1)

-----

int main()
{
    int no_of_elements;
    cin >> no_of_elements;
    
    vector <long long> A(no_of_elements + 1);
    for(int i = 1; i <= no_of_elements; i++)
    {
        cin >> A[i];
    }
    
    vector <long long> prefix_sum(no_of_elements + 1, 0);
    for(int i = 1; i <= no_of_elements; i++)
    {
        prefix_sum[i] = prefix_sum[i - 1] + A[i];
    }
    
    int end_point = 0;
    
    map <long long, int> frequency;
    map <long long, int> last_occurence;
    frequency[0] = 1;
    long long answer = 0;
    
    for(int i = 1; i <= no_of_elements; i++)
    {
        if(frequency[prefix_sum[i]] != 0)
        {
            end_point = max(end_point, last_occurence[prefix_sum[i]] + 2);
        }
        
        last_occurence[prefix_sum[i]] = i;
        
        frequency[prefix_sum[i]] = i;
        
        int distance = (end_point == 0 ? i : i - end_point + 1);
    
        answer += (distance > 0 ? distance : 0);
    }
    
    cout << answer << "\n";
    
    return 0;
}

