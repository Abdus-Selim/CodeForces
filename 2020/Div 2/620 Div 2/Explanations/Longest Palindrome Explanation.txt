Let R[S] be the reverse of string S

The final palindrome looks like this

S1 S2 S3 ... Sm (M)R[Sm] ... R[S3]R[S2]R[S1]
And M is a palindrome that can be placed in the middle.

The constraints are small enough that we can check every pair of strings.
For each string S[i], we will check if it's reverse R(S[i]) is also present in the array.
We will store all the strings in one vector and all their reverses in another vector.

Suppose S[i] is the 3rd string in the list of strings we will print,
then R(S[i]) is the 3rd last string that we need to print.

Lastly, we can have at most 1 palindromic string in the middle.
We will check if any of the strings are palindromes.
If they are, we will use one in the middle.

-----

int main()
{
    int no_of_strings, length;
    cin >> no_of_strings >> length;

    vector <string> S(no_of_strings + 1);
    for(int i = 1; i <= no_of_strings; i++)
    {
        cin >> S[i];
    }

    vector <int> strings_index;
    vector <int> reverse_strings_index;
    for(int i = 1; i <= no_of_strings; i++)
    {
        for(int j = i + 1; j <= no_of_strings; j++)
        {
            if(is_palindrome(S[i] + S[j]))
            {
                strings_index.push_back(i);
                reverse_strings_index.push_back(j);
            }
        }
    }

    string middle;
    for(int i = 1; i <= no_of_strings; i++)
    {
        if(is_palindrome(S[i]))
        {
            middle = S[i];
        }
    }

    int final_length = strings_index.size() + (middle.size() != 0) + reverse_strings_index.size();

    final_length *= length;

    cout << final_length << "\n";

    for(int i = 0; i < strings_index.size(); i++)
    {
        cout << S[strings_index[i]];
    }

    if(middle.size() != 0)
    {
        cout << middle;
    }

    for(int i = reverse_strings_index.size() - 1; i >= 0; i--)
    {
        cout << S[reverse_strings_index[i]];
    }

    cout << "\n";
    return 0;
}
