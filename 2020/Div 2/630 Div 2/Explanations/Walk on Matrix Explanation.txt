Here is the basic idea -

We will make a matrix such that the DP matrix gives 0 as the answer and the actual answer
is k.

Here, is what we will do.

Suppose, k = 10101

We need 3 integers

1. The 'Full Form' = 111111
2. The MSB = 100000
3. Complement = 101010

Here is the 3x3 matrix we will create -

111111 010101 101010
100000 010101 101010
111111 111111 010101

-----

Here is the DP Matrix

111111 010101 000000
100000 010101 000000
100000 100000 000000

-----

The Answer in the DP Matrix is 0, and the answer in the original matrix is 010101,

Which is what is required.

-----

k = 0 is a special case where we will print a single integer

-----

How do we get this idea ?

Look at the example test case given.
We must create a matrix where following the DP path will always gives 0.
We do this by adding an additional bit and setting it so it has no bit in common with k
And then try to create a path in such a way that the DP path will give the answer = 0

The DP Path makes the answer 0
The optimal path gives us the answer k

-----

int is_bit_set(int n, int bit)
{
    return ((n&(1LL << bit)) != 0);
}

int all_ones(int n)
{
    return ( (n&(n + 1)) == 0);
}

int get_msb(int n)
{
    for(int bit = MAX_BITS; bit >= 0; bit--)
    {
        if(is_bit_set(n, bit))
        {
            return bit;
        }
    }

    return 0;
}

int complete(int n)
{
    int most_significant_bit = get_msb(n);

    int complete_n = 0;
    for(int bit = most_significant_bit; bit >= 0; bit--)
    {
        complete_n |= (1LL << bit);
    }

    return complete_n;
}

int main()
{
    int n;
    cin >> n;

    if(n == 0)
    {
        cout << "1 1\n";

        cout << "1\n";

        return 0;
    }

    int full_form = (all_ones(n) ? 4*n + 3: 2*complete(n) + 1);
    int complement = full_form - n;
    int msb = (1 << get_msb(full_form));

    matrix[1][1] = full_form; matrix[1][2] = n; matrix[1][3] = complement;
    matrix[2][1] = msb;       matrix[2][2] = n; matrix[2][3] = complement;
    matrix[3][1] = full_form; matrix[3][2] = full_form; matrix[3][3] = n;

    cout << "3 3\n";
    for(int i = 1; i <= 3; i++)
    {
        for(int j = 1; j <= 3; j++)
        {
            cout << matrix[i][j] << " ";
        }

        cout << "\n";
    }

    /*dp[0][1] = matrix[1][1];
    for(int i = 1; i <= 3; i++)
    {
        for(int j = 1; j <= 3; j++)
        {
            dp[i][j] = max(matrix[i][j]&dp[i - 1][j], matrix[i][j]&dp[i][j - 1]);

            cout << dp[i][j] << " ";
        }

        cout << "\n";
    }*/
    return 0;
}
