Suppose

U = 110001 V = 1100001

I will keep track of the frequency of all 64 bits

So initially, it will be U = 110001

Now, the sum I have to still make is V - U = 110000

So here is what I will do
First 4 bits nothing

Then, I'll go to the fifth bit

[11:34 PM, 3/14/2020] Saikat: Presently, my answer is 110001

The sum has a 2^5 in the fifth spot
 I cannot make it 120001
The reason is the XOR in that spot is 1

So instead of adding 2^5, I will add two 2^4's

11 2 001
Then, I will go to the sixth bit

I can't add a 1 in there.
Here are my options -

(2) 12001
1 (3) 2001
11 (6) 001
112 (8) 01
1120 (16) 1
11200 (32)

 Among all these options, 1 3 2001 is the best

 -----

 1. Keep track of frequency of each bit

2. Initially, set it to XOR

3. Then, look at the remaining sum

4. After that go bit by bit. If the i-th bit is set in the remaining sum, then we can either

Add 2 bits of (i - 1)
Add 4 bits of (i - 2)
Add 8 bits of (i - 3)
Add 16 bits of (i - 4)
.
.
Add 2^m bits of (i - m)

All these choices add an even number of summands so XOR does not change

Among all these options,
we will choose the one which minimises the number of summands

-----

It is not possible if (u > v) or if u =!= v (mod 2)

The reason is that the bits in the last position must be either even or odd and can't be both

If u = v = 0, then the answer is 0

Else if u = v, the answer is 1

-----

There is a simpler solution

If the answer is possible and not 0 or 1, then it is always at most 3

(u + v)/2, (u - v)/2, v works

-----

int some_non_zero(vector <int> &A)
{
    for(int i = 0; i < A.size(); i++)
    {
        if(A[i] > 0)
        {
            return true;
        }
    }

    return false;
}

int is_bit_set(long long n, int bit)
{
    return ( (n&(1LL << bit)) != 0);
}

int main()
{
    long long array_xor, array_sum;
    cin >> array_xor >> array_sum;

    if(array_xor > array_sum || (array_xor%2 != array_sum%2))
    {
        cout << "-1\n";

        return 0;
    }

    if(array_xor == array_sum)
    {
        if(array_xor == 0)
        {
            cout << "0\n";
        }
        else
        {
            cout << "1\n";
            cout << array_xor << "\n";
        }

        return 0;
    }

    const int MAX_BITS = 63;
    vector <int> frequency(MAX_BITS, 0);
    for(int bit = 0; bit < MAX_BITS; bit++)
    {
        if(is_bit_set(array_xor, bit))
        {
            array_sum -= (1LL << bit);

            frequency[bit]++;
        }
    }

    for(int bit = 0; bit < MAX_BITS; bit++)
    {
        if(is_bit_set(array_sum, bit))
        {
            int best_spot = max(bit - 1, 0);
            long long best_no_of_terms = frequency[best_spot] + 2;

            for(int i = bit - 1; i >= 0; i--)
            {
                if(frequency[i] + (1LL << (bit - i)) <= best_no_of_terms)
                {
                    best_no_of_terms = frequency[i] + (1LL << (bit - i));

                    best_spot = i;
                }
            }

            frequency[best_spot] += (1LL << (bit - best_spot));

            array_sum -= (1LL << bit);
        }
    }

    vector <long long> A;
    while(some_non_zero(frequency))
    {
        long long current = 0;

        for(int bit = 0; bit < MAX_BITS; bit++)
        {
            if(frequency[bit] > 0)
            {
                current |= (1LL << bit);

                frequency[bit]--;
            }
        }

        A.push_back(current);
    }

    long long xorr = 0, sum = 0;
    cout << A.size() << "\n";
    for(int i = 0; i < A.size(); i++)
    {
        cout << A[i] << " ";
        xorr ^= A[i];
        sum += A[i];
    }

    cout << "\n";

    return 0;
}
