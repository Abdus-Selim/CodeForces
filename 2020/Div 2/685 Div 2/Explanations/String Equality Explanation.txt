Fact 1 - If A and B are anagrams, we can always make A = B

Let us perform the swaps to make the last alphabet of A = last alphabet of B

Then, we can delete the last character and repeat the same with strings of length (n - 1).

------

Fact 2 - The frequency of every alphabet (mod K) never changes

We can change exactly K alphabets at a time.

So the number of removals or additions to any alphabet can only be K at a time.

So frequency[alphabet] (mod K) is invariant.

If (frequency_A[alpha] %k != frequency_B[alpha]%k), then
A and B can never have the same frequency of that alphabet.

If they have the same remainder mod K for every alphabet, we will do a simulation.

-----

void solve()
{
    int length, k;
    string A, B;
    cin >> length >> k >> A >> B;

    const int NO_OF_ALPHABETS = 26;
    vector <int> frequency_A(NO_OF_ALPHABETS + 1, 0), frequency_B(NO_OF_ALPHABETS + 1, 0);
    for(int i = 0; i < length; i++)
    {
        frequency_A[A[i] - 'a']++;
        frequency_B[B[i] - 'a']++;
    }

    int possible = true;

    for(int alpha = 0; alpha < NO_OF_ALPHABETS; alpha++)
    {
        if(frequency_A[alpha]%k != frequency_B[alpha]%k)
        {
            possible = false;
        }
    }

    for(int alpha = 0; alpha < NO_OF_ALPHABETS; alpha++)
    {
        if(frequency_B[alpha] > frequency_A[alpha])
        {
            possible = false;
            break;
        }

        int extra = frequency_A[alpha] - frequency_B[alpha];

        frequency_A[alpha + 1] += extra;
    }

    cout << (possible ? "Yes\n" : "No\n");
}
