We will have a bitmask corresponding to each possibility.

Here is our strategy 

001
010
100
011
101
110
111

-----

So, we will go through all the submasks and find out which masks correspond to 
possible meals.

-----

void solve()
{
    const int NO_OF_FOOD = 3;
    vector <int> portions(NO_OF_FOOD);
    for(int i = 0; i < NO_OF_FOOD; i++)
    {
        cin >> portions[i];
    }
    
    sort(all(portions));
    reverse(all(portions));
    
    int max_mask = (1 << NO_OF_FOOD);
    int no_of_meals = 0;
    
    for(int m = 1; m < max_mask; m++)
    {
        int good_mask = true;
        for(int i = 0; i < NO_OF_FOOD; i++)
        {
            if(is_bit_set(m, i) && portions[i] <= 0)
            {   //cout << "No " << i << "\n";
                good_mask = false;
            }
        }
        //cout << "Mask = " << m << "\n";
        if(!good_mask)
        {
            continue;
        }
        //cout << "Good \n";
        for(int i = 0; i < NO_OF_FOOD; i++)
        {
            if(is_bit_set(m, i))
            {
                portions[i]--;
            }
        }
        
        no_of_meals++;
    }
    
    cout << no_of_meals << "\n";
}
