This operation does not allow us to add any new characters so the number of 1s and 0s must be equal.

Let us ignore the positions where S[i] = T[i] and delete them from the string

In one step, we can choose an alternating subsequence - 010101 or 1010101

Now, the question is to count the number of alternating sequences the string can be partitioned into

-----

Let us keep track of the list of available sequences ending with 1 and with 0

When we are at S[i], we will check if there are any available sequences ending with it's complement.

If there are, then we will match S[i] with that and update it accordingly.

For example, if S[i] = 0, and we have sequence number 3 ending with 1, we will append s[i] to the third sequence

-----

We will maintain a set of all available sequences ending with both numbers

When we process S[i], we will check if it's complement is empty or if there is some available sequence

We will update it accordingly

-----

int main()
{
    int length;
    string S, T;
    cin >> length >> S >> T;

    if(no_of_1s(S) != no_of_1s(T))
    {
        cout << "-1\n";

        return 0;
    }

    string effective_S;
    for(int i = 0; i < length; i++)
    {
        if(S[i] != T[i])
        {
            effective_S += S[i];
        }
    }

    int no_of_sequences = 0;
    set <int> last_sequence[2];
    for(int i = 0; i < effective_S.size(); i++)
    {
        int current = effective_S[i] - '0';
        int complement = 1 - current;

        if(last_sequence[complement].size() == 0)
        {
            no_of_sequences++;

            last_sequence[current].insert(no_of_sequences);
        }
        else
        {
            auto it = last_sequence[complement].begin();

            last_sequence[current].insert(*it);

            last_sequence[complement].erase(it);
        }
    }

    cout << no_of_sequences << "\n";

    return 0;
}
