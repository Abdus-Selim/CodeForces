Let us draw an edge between every pair of vertices (u, v) if (u < v)

This will give us a directed graph.

It is important to notice that each connected component can have exactly 1 Universal Identifier.
All other vertices in this component must be an Existential Identifier as they are 'forced'.

If there are any cycles in this graph, then we cannot have any valid assignment

-----

One thing to be careful of in this problem

This is a directed graph.

So, when we visit an unvisited graph, it is not enough to only do DFS
We must also do DFS on the reverse graph.

Suppose the graph is like

5 -> 4 -> 1 -> 2 -> 3

If we do DFS from 1, we will only be marking 2 and 3
But, we should mark 4 and 5 too

This is why we must maintain two vectors -
Visited and Visited Reverse to mark all vertices in the same component.

-----

To check if there is a cycle in either the DFS or Reverse DFS,
we will maintain another vector to keep track of whether a variable is still on the DFS Stack.
If we visit a vertex on the DFS Stack, it means there is a cycle.
Otherwise, there is not.

-----

#include <iostream>
#include <vector>

using namespace std;

const int MAX_N = 2e5 + 5;
vector <int> graph[MAX_N], reverse_graph[MAX_N];
vector <int> visited(MAX_N, false);
vector <int> on_stack(MAX_N, false);
vector <int> visited_reverse(MAX_N, false), on_stack_reverse(MAX_N, 0);

int dfs_cycle_reverse(int v)
{
    visited_reverse[v] = true;
    on_stack_reverse[v] = true;

    for(int i = 0; i < reverse_graph[v].size(); i++)
    {
        int child_v = reverse_graph[v][i];

        if(visited_reverse[child_v] && on_stack_reverse[child_v])
        {
            return true;
        }

        if(!visited_reverse[child_v] && dfs_cycle_reverse(child_v))
        {
            return true;
        }
    }

    on_stack_reverse[v] = false;

    return false;
}

int dfs_cycle(int v)
{
    visited[v] = true;
    on_stack[v] = true;

    for(int i = 0; i < graph[v].size(); i++)
    {
        int child_v = graph[v][i];

        if(visited[child_v] && on_stack[child_v])
        {
            return true;
        }

        if(!visited[child_v] && dfs_cycle(child_v))
        {
            return true;
        }
    }

    on_stack[v] = false;

    return false;
}

int main()
{
    int no_of_variables, no_of_inequalities;
    cin >> no_of_variables >> no_of_inequalities;

    vector <int> indegree(no_of_variables + 1, 0);
    for(int i = 1; i <= no_of_inequalities; i++)
    {
        int u, v;
        cin >> u >> v;

        graph[u].push_back(v);
        reverse_graph[v].push_back(u);

        indegree[v]++; //cout << "In Degree " << v << " = " << indegree[v] << "\n";
    }

    int no_of_universals = 0;
    string answer;
    for(int i = 1; i <= no_of_variables; i++)
    {
        if(!visited[i] && !visited_reverse[i])
        {
            no_of_universals++;

            answer += 'A';
        }
        else
        {
            answer += 'E';
        }

        if(dfs_cycle(i) || dfs_cycle_reverse(i))
        {
            cout << "-1\n";

            return 0;
        }
    }

    cout << no_of_universals << "\n";
    cout << answer << "\n";
    return 0;
}
