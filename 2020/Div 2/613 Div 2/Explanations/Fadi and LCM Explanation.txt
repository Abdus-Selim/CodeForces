Let us notice something.

Suppose p is a prime integer.

The LCM of (p^a, p^b) is p^{max(a, b)}

If X = p1^a1 p2^a2 ... pn^an

If we have to split their prime factors among a and b.

We must give p1^a1 to at least one of (a, b).

Since we want to minimise the maximum, we will give p1^a1 to one of them and 1 to the other.

In the given range, the number of distinct prime factors is not too much (Around 11).

We will use bitmasks to check how many of the 11 factors we give to a and how many we give to b and choose the best pair.

------

int main()
{
    long long n;
    cin >> n;

    vector <long long> prime_factors;
    factorise(n, prime_factors);

    long long best_x = 1, best_y = n;
    int number_of_uniques = prime_factors.size();
    for(long long mask = 0; mask < (1LL << number_of_uniques); mask++)
    {
        long long x = 1, y = 1;
        for(int bit = 0; bit < number_of_uniques; bit++)
        {
            if(is_bit_set(mask, bit))
            {
               x *= prime_factors[bit];
            }
            else
            {
                y *= prime_factors[bit];
            }
        }

        if(max(x, y) < max(best_x, best_y))
        {
            best_x = x;
            best_y = y;
        }
    }

    cout << best_x << " " << best_y << "\n";

    return 0;
}
