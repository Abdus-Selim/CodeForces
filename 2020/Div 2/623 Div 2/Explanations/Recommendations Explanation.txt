The only operation that we are allowed is addition.

Let us start processing the elements in ascending order.

At any point in time A[1] is the smallest integer.

If A[1] < A[2], we can remove A[1] from the array and solve the same problem from
[2, n]

Otherwise, A[1] = A[2] = ... = A[i]

In this case, we have to increment (i - 1) elements no matter what.

So, we will increment all values except that which has the highest cost.

And we will discard the element with the largest cost and now we will have

A[1], A[2] + 1, A[3] + 1, ... , A[i] + 1

We have to check if (A[i + 1] == A[i] + 1)

If yes, then we will add the cost of (A[i] + 1) to our multiset of costs
and once again increment everything except the largest value.

Otherwise, we will repeat the same process till the multiset is empty.

-----

I have used a variable called current minima which keeps track of the current minimum
And a multiset which keeps track of all the costs of the current minimum.

At any one step, we will discard the largest cost.
And increment all the other equal elements by 1.
We will update the total cost incurred so far.
And we will add (A[i] + 1) cost into our multiset if current minima = (A[i] + 1)

And when the multiset is empty, we will make current minima = A[i] again
This is to prevent it from timing out by getting stuck

-----

#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <map>

#define all(v) (v).begin(), (v).end()
using namespace std;

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int no_of_magazines;
    cin >> no_of_magazines;

    vector <pair <int, long long> > M(no_of_magazines);

    for(int i = 0; i < no_of_magazines; i++)
    {
        cin >> M[i].first;
    }

    for(int i = 0; i < no_of_magazines; i++)
    {
        cin >> M[i].second;
    }

    sort(all(M));

    multiset <long long> equal_segment;

    long long current_minima = 0, i = 0;

    long long total_cost = 0, equal_segment_sum = 0;
    while(i < M.size() || equal_segment.size() > 0)
    {
        while(i < M.size() && M[i].first == current_minima)
        {
            equal_segment.insert(M[i].second);
            equal_segment_sum += M[i].second;
            i++;
        }

        if(equal_segment.size() > 0)
        {
            auto it = equal_segment.rbegin();
            long long largest = *it;

            equal_segment.erase(equal_segment.find(largest)); //Erases only one instance of largest
            equal_segment_sum -= largest;

            total_cost += equal_segment_sum;

            current_minima++;
        }
        else
        {
            current_minima = M[i].first;
        }
    }

    cout << total_cost << "\n";
    return 0;
}
